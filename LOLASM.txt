LOLCODE INTERMEDIATE LANGUAGE


Registers 

REG_IT - Dynamic Variable that acts as a default of all expressions
REG_CMP - Integer variable that can be modified by conditional statements
 -> 0 - No operation
 -> 1 - Equal
 -> 2 - Less than
 -> 3 - Greater than
 
 REG_ORLY -> Boolean variable exclusive for ORLY Block
 
Lone expressions:

	ASGN <dest>|default:IT <expressions>
 
 
I HAS A 
 -> DCLV [var] [val]
    Declare variable with value
 -> DCLN [var]
	Declare variable without initial value (Default to NOOB)
VISIBLE
 -> CPRT [val]
	Print to console
	
	# Every arguments or expression will be typecasted to string
	# and every tokenized expression will have separate CPRT/CPLN command 
	# on the bytecode.

 -> CPLN [val]
	Print to console with newline, activated by "!" command
	
GIMME
 -< INPT [var]
	Stores to val the resulting input, Default return is string
	
ORLY BLOCK & WTF
	-> ORLY  

	block ends will be turned to labels
	
Boolean Operators

	IEQ | x == y
	NEQ | x != y 
	XOR | x | y
	AND | x & y

Conditional Jump Operators

	IT variable comparators
	JEQI
	JNQI
	

Unconditional Jump - JMP [Label]


----- Decision Disassembly for ORLY Block -----


/assembler registers
--> ifNoCondExist - bool
--> ifYesCondExist - bool
--> IT variable
--> Dictionary MebbeExps, key is the line of the mebbe op, value is the expression
--> CondOpCount = -1;

BOTH SAEM <1exp>	
O RLY?					--> COMP [Jump Table Label] //EXP COMP_15_GEN

if(condopcoount=-1) dont create jump
if(condopcount>-1)  { add jump to end}


YA RLY					--> LABEL [COMP_15_YES]

* add condopcoount +1
* ifYesCondExist=true

VISIBLE <2exp>			-->*ignore*
MEBBE <3exp>			-->

if(condopcoount=-1) dont create jump
if(condopcount>-1)      --> JMP [COMP15]
store argument w/ key to mebbedict

MEBBE <4exp>
VISIBLE <5exp>
NO WAI

if(condopcoount=-1) dont create jump
if(condopcount>-1)  { add jump to end}
store argument w/ key to mebbedict

VISIBLE <6exp>
OIC						--> LABEL COMP_15_GEN ;Generate the conditions
						if (ifNoCondExist)
						--> JNs